[[plugins]]
repo = 'neoclide/coc.nvim'
rev = 'release'

[[plugins]]
repo = 'itchyny/lightline.vim'
hook_add = '''
  " lightline.vim
  " WORKDIRからの相対パスを表示する
  function! LightlineFilename()
    let root = fnamemodify(get(b:, 'git_dir'), ':h')
    let path = expand('%:p')
    if path[:len(root)-1] ==# root
      return path[len(root)+1:]
    endif
    return expand('%')
  endfunction

  let g:lightline = {
        \ 'active': {
        \   'left': [ [ 'mode', 'paste' ],
        \             [ 'gitbranch', 'readonly', 'filename', 'modified' ] ]
        \ },
        \ 'component_function': {
        \   'gitbranch': 'FugitiveHead',
        \   'filename': 'LightlineFilename',
        \ },
        \ }
'''

[[plugins]]
repo = 'mtdl9/vim-log-highlighting'
on_ft = ['log']

[[plugins]]
repo = 'tpope/vim-fugitive'
hook_add = '''
  map <Leader>g [fugitive]
  " nnoremap <silent> [fugitive]a :Git add %:p<CR><CR>
  " nnoremap <silent> [fugitive]c :Git commit<CR><CR>
  nnoremap <silent> [fugitive]s :Git<CR>
  " nnoremap <silent> [fugitive]p :Git push<CR>
  nnoremap <silent> [fugitive]d :Gdiff<CR>
  " nnoremap <silent> [fugitive]l :Gclog<CR>
  " nnoremap <silent> [fugitive]b :Git blame<CR>
'''
# on_cmd = ['Gdiff']

[[plugins]]
repo = 'jiangmiao/auto-pairs'
on_i = 1

[[plugins]]
repo = 'junegunn/fzf'

[[plugins]]
repo = 'tpope/vim-commentary'

[[plugins]]
repo = 'dhruvasagar/vim-table-mode'

[[plugins]]
repo = 'cocopon/iceberg.vim'

[[plugins]]
repo = 'wsdjeg/dein-ui.vim'

[[plugins]]
repo = 'ryanoasis/vim-devicons'
hook_add = '''
  " フォルダアイコンを表示
  let g:WebDevIconsNerdTreeBeforeGlyphPadding = ""
  let g:WebDevIconsUnicodeDecorateFolderNodes = v:true
  " after a re-source, fix syntax matching issues (concealing brackets):
  if exists('g:loaded_webdevicons')
    call webdevicons#refresh()
  endif
'''

[[plugins]]
repo = 'kyazdani42/nvim-web-devicons'

[[plugins]]
repo = 'romgrk/barbar.nvim'
depends = 'nvim-web-devicons'
hook_add = '''
  " NOTE: If barbar's option dict isn't created yet, create it
  let bufferline = get(g:, 'bufferline', {})
  " Enable/disable close button
  let bufferline.closable = v:false

  " barbar.nvim
  nnoremap <silent> <C-j> :BufferPrevious<CR>
  nnoremap <silent> <C-k> :BufferNext<CR>
  nnoremap <silent> <C-c> :BufferClose<CR>

'''

[[plugins]]
repo = 'lambdalisue/fern.vim'
hook_post_source = '''
  nmap <Leader>d [fern]
  nnoremap <silent> [fern]f :Fern . -drawer<CR>
  nnoremap <silent>sf :Fern .<CR>
  let g:fern#default_hidden=1
  let g:fern#renderer = "nerdfont"
  let g:fern#renderer#nerdfont#indent_markers = 1

  function! s:fern_settings() abort
    nmap <silent> <buffer> p     <Plug>(fern-action-preview:toggle)
    nmap <silent> <buffer> <C-p> <Plug>(fern-action-preview:auto:toggle)
    nmap <silent> <buffer> <C-d> <Plug>(fern-action-preview:scroll:down:half)
    nmap <silent> <buffer> <C-u> <Plug>(fern-action-preview:scroll:up:half)
  endfunction

  augroup fern-settings
    autocmd!
    autocmd FileType fern call s:fern_settings()
  augroup END
'''

[[plugins]]
repo = 'lambdalisue/fern-renderer-nerdfont.vim'
depends = 'fern.vim'

[[plugins]]
repo = 'lambdalisue/nerdfont.vim'
depends = 'fern.vim'

[[plugins]]
repo = 'yuki-yano/fern-preview.vim'
depends = 'fern.vim'

[[plugins]]
repo = 'vim-denops/denops.vim'

[[plugins]]
repo = 'nvim-treesitter/nvim-treesitter'
hook_post_update = 'TSUpdate'

[[plugins]]
repo = 'machakann/vim-sandwich'

[[plugins]]
repo = 'mattn/emmet-vim'

[[plugins]]
repo = 'windwp/nvim-ts-autotag'

[[plugins]] # color codeのpreview
repo = 'gorodinskiy/vim-coloresque'

[[plugins]]
repo = 'p00f/nvim-ts-rainbow'

[[plugins]]
repo = 'JoosepAlviste/nvim-ts-context-commentstring'

[[plugins]]
repo = 'nicwest/vim-camelsnek'

[[plugins]]
repo = 'thinca/vim-quickrun'
hook_add = '''
  nnoremap <silent><leader>r :QuickRun<CR>
  let g:quickrun_config = {
  \   "_" : {
  \       "outputter" : "multi:buffer:quickfix",
  \       "outputter/buffer/split" : ":botright 8px",
  \       "runner" : "vimproc",
  \       "runner/vimproc/updatetime" : 40,
  \       "hook/close_quickfix/enable_hook_loaded" : 1,
  \       "hook/close_quickfix/enable_success" : 1,
  \       "hook/close_buffer/enable_failure" : 1,
  \       "hook/close_buffer/enable_empty_data" : 1,
  \       "hook/inu/enable" : 1,
  \       "hook/inu/wait" : 20,
  \   },
  \}

'''

[[plugins]]
repo = 'iamcco/markdown-preview.nvim'
on_ft = ['markdown', 'pandoc.markdown', 'rmd']
build = 'sh -c "cd app && yarn install"'
hook_add = '''
  nnoremap <Leader>md :MarkdownPreview<CR>
'''

[[plugins]]
repo = 'rafamadriz/friendly-snippets'

[[plugins]]
repo = 'ruanyl/vim-gh-line'

[[plugins]]
repo = 'gpanders/editorconfig.nvim'

[[plugins]]
repo = 'Shougo/vimproc.vim'
build = 'make'

[[plugins]]
repo = 'osyo-manga/shabadou.vim'

[[plugins]]
# repo = 'simrat39/symbols-outline.nvim'
repo = 'rbjorklin/symbols-outline.nvim'
rev = "fix-outline-detection"

[[plugins]]
repo = 'akinsho/toggleterm.nvim'
rev = '*'

[[plugins]]
repo = 'lewis6991/gitsigns.nvim'

# [[plugins]]
# repo = 'nvim-lua/plenary.nvim'

# [[plugins]]
# repo = 'nvim-telescope/telescope.nvim'
# depends = ['plenary.nvim']

# [[plugins]]
# repo = 'nvim-telescope/telescope-fzf-native.nvim'
# depends = ['telescope.nvim']
# build = 'make'
# hook_add = '''
#   nmap <leader>f [telescope]
#   xmap <leader>f [telescope]

#   nnoremap <silent> [telescope]f :Telescope find_files<CR>
#   nnoremap <silent> [telescope]p :Telescope find_files hidden=true<CR>
#   nnoremap <silent> [telescope]gr <cmd>Telescope grep_string<cr>
#   nnoremap <silent> [telescope]gs <cmd>Telescope git_status<cr>
#   nnoremap <silent> [telescope]gp <cmd>Telescope live_grep<cr>
#   nnoremap <silent> [telescope]b <cmd>Telescope buffers<cr>
#   nnoremap <silent> [telescope]o <cmd>Telescope oldfiles<cr>
#   nnoremap <silent> [telescope]g <cmd>Telescope git_branches<cr>
#   nnoremap <silent> [telescope]h <cmd>Telescope help_tags<cr>
# '''

# [[plugins]]
# repo = 'shaunsingh/oxocarbon.nvim'
# rev = 'fennel'
# fork された方だと動いた
# repo = 'B4mbus/oxocarbon-lua.nvim'

# [[plugins]]
# repo = 'tpope/vim-rails'

# [[plugins]]
# repo = 'thoughtbot/vim-rspec'
# hook_add = '''
#   map <Leader>t :call RunCurrentSpecFile()<CR>
#   map <Leader>s :call RunNearestSpec()<CR>
#   map <Leader>l :call RunLastSpec()<CR>
#   map <Leader>a :call RunAllSpecs()<CR>
# '''

# treesitterカスタマイズしたい時に使う
# [[plugins]]
# repo = 'nvim-treesitter/playground'

# [[plugins]]
# repo = 'Shougo/unite.vim'

